@using CleanArchitecture.Blazor.Wasm.ViewModels.Game

@page "/games/add"


@inject NavigationManager Navigation
@inject IGamesClient GamesClient
@inject IGenresClient GenresClient
@inject ILogger<CreateGame> Logger


@code
{
    [Inject]
    [SupplyParameterFromForm]
    private CreateGameViewModel ViewModel { get; set; } = null!;

    private List<GameModel> Games { get; set; } = null!;

    public class BrowserFile 
    {
        public string FileName{ get; set; }
        public long FileSize{ get; set; }
        public string FileType{ get; set; }
        public string FileContent{ get; set; }
    }
    private List<BrowserFile> files = new();
    private int maxFilesCount { get; set; } = 3;

    #region Overrides

    //Called When Component is ready to start and its parameters was set
    protected override void OnInitialized()
    {
        ViewModel.CreatedDate=DateTime.Now;

        ViewModel.GenresList = GenresClient.GetGameGenres();

        Games = new List<GameModel>();
    }

    #endregion

    #region Form Events

    private async void HandleNewForm()
    {
        Logger.LogInformation($"(Created)=> Name={ViewModel.Name} , Genre={ViewModel.GenreId} , Price={ViewModel.Price} ,Year={ViewModel.Year}");

        Games.Add(new GameModel
        {
            Name = ViewModel.Name,
            Price = ViewModel.Price,
            Year = ViewModel.Year
        });

        if (ViewModel.UseApi)
        {
            await GamesClient.AddGameAsync(ViewModel.Name, ViewModel.GenreId, ViewModel.Price, ViewModel.Year);
            Navigation.NavigateTo("/games");
        }

    }

    #endregion

    #region File Events

    private async Task uploadSelectedFiles(InputFileChangeEventArgs e)
    {
        files.Clear();

       
        //Get Matched Files Only
        var selectedFiles = e.GetMultipleFiles()
                 .Where(c => c.ContentType.Contains("image"))
                 .Take(maxFilesCount);

       //Store Selected Files inside Files List after convert it as Browser File
        foreach(var file in selectedFiles)
        {
            files.Add(new BrowserFile
                {
                    FileName = file.Name,
                    FileSize = file.Size,
                    FileType = file.ContentType,
                    FileContent = await ConvertBrowserFileToBase64Async(file)
                });
        }

        //Call Api For Posting Files To Server
    }
    
    private async Task<string> ConvertBrowserFileToBase64Async(IBrowserFile file)
    {
        var buffer = new Byte[file.Size];

        await file.OpenReadStream().ReadAsync(buffer);

        var result = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";

        return result;
    }

    #endregion
}

<PageTitle>New Game</PageTitle>

<h3>New Game</h3>

<EditForm class="row g-3" Model="ViewModel" FormName="FormNewGame" OnValidSubmit="HandleNewForm">

    <DataAnnotationsValidator />

    <ValidationSummary />

    <div class="col-12">
        <label for="txtName" class="form-label">Name</label>
        <InputText id="txtName" @bind-Value="ViewModel.Name" class="form-control" />
        <ValidationMessage For="()=>ViewModel.Name" />
    </div>

    <div class="col-md-4">
        <label for="cboGenre" class="form-label">Genre</label>
        <InputSelect id="cboGenre" class="form-select" @bind-Value="ViewModel.GenreId">
            <option value="-1" selected>Select...</option>

            @foreach (var genre in ViewModel.GenresList)
            {
                <option value="@genre.Id">@genre.Name</option>
            }

        </InputSelect>

    </div>

    <div class="col-md-4">
        <label for="txtPrice" class="form-label">Price</label>
        <InputNumber id="txtPrice" class="form-control" @bind-Value="ViewModel.Price" />
        <ValidationMessage For="()=>ViewModel.Price" />
    </div>

    
    <div class="col-md-4">
        <label for="txtYear" class="form-label">Year</label>
        <InputNumber id="txtYear" class="form-control" @bind-Value="ViewModel.Year" />
        <ValidationMessage For="()=>ViewModel.Year" />
    </div>

    <div class="col-md-4">
        <label for="txtCreateDate" class="form-label">CreatedOn</label>
        <InputDate id="txtCreateDate" class="form-control" @bind-Value="ViewModel.CreatedDate" />
        <ValidationMessage For="()=>ViewModel.CreatedDate" />
    </div>

    <div class="col-md-4">
        <label class="form-label">Rate</label>
        <div class="form-control form-check-inline">
            <InputRadioGroup @bind-Value="ViewModel.Rate" >
                @foreach (var rate in Enum.GetValues<GameRateEnum>())
                {
                    <InputRadio id="@rate" Value="rate" class="form-check-input" />
                    <label for="@rate" class="form-check-label">@rate.ToString()</label>
                }
            </InputRadioGroup>
        </div>

        
    </div>

    <div class="col-md-4">
        <label for="chkUseApi" class="form-label">Api</label>
        <div class="form-control form-check-inline">
            <InputCheckbox id="chkUseApi" class="form-check-input" @bind-Value="ViewModel.UseApi" />
            <label for="chkUseApi" class="form-check-label">Use Api</label>
        </div>
        
    </div>

    <div class="col-12">
        <label for="txtDescription" class="form-label">Description</label>
        <InputTextArea id="txtDescription" class="form-control" rows="3" @bind-Value="ViewModel.Description" />
        <ValidationMessage For="()=>ViewModel.Description" />
    </div>

    <div class="col-12">
        <label for="fileImages" class="form-label">Images</label>
        <InputFile id="fileImages" class="form-control" OnChange="uploadSelectedFiles" multiple />
    </div>

    <div class="col-12">
        <ul>
            @foreach (var file in files)
            {
                <li>
                    <b>Name</b>=@file.FileName & <b>Size</b>=@file.FileSize Bytes & <b>Type</b>=@file.FileType
                </li>
            }
        </ul>
        
        <ul>
            @{
                foreach(var image in files)
                {
                    <img src="@image.FileContent" alt="@image.FileName" style="width:auto;height:auto;max-width:100%;" />
                }
            }
        </ul>
    </div>



    

    <div class="col-12">
        <button type="submit" class="btn btn-primary" role="button">Save</button>
        <button type="reset" class="btn btn-secondary" role="button">Reset</button>
        <a class="btn btn-secondary" role="button" href="games">Cancel</a>
    </div>

</EditForm>

<hr />

<ul>
    @foreach(var game in Games)
    {
        <li>
            <b>Name = </b> @game.Name - <b>Price = </b> @game.Price - <b>Year = </b> @game.Year
        </li>
    }
</ul>