// <auto-generated />
using System;
using CleanArchitecture.Identity.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Identity.Migrations
{
    [DbContext(typeof(ApplicationIdentityDbContext))]
    [Migration("20240424201117_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Identity.Entities.ApplicationPermission<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", "Identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Can Insert Data",
                            Name = "CanInsert"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Can Update Data",
                            Name = "CanUpdate"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Can Delete Data",
                            Name = "CanDelete"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Can Print Data",
                            Name = "CanPrint"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Can Import Data",
                            Name = "CanImport"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Can Export Data",
                            Name = "CanExport"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Can View Data",
                            Name = "CanView"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Identity.Entities.ApplicationRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("557d96c5-6ab6-40b9-b2a3-47166e861366"),
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        },
                        new
                        {
                            Id = new Guid("447d96c5-6ab6-40b9-b2a3-47166e861366"),
                            Name = "Supervisors",
                            NormalizedName = "SUPERVISORS"
                        },
                        new
                        {
                            Id = new Guid("337d96c5-6ab6-40b9-b2a3-47166e861366"),
                            Name = "Users",
                            NormalizedName = "USERS"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Identity.Entities.ApplicationUser<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b345d5d-4714-401f-b124-32836d210679"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63dee25c-171c-4cab-81c7-2b5f9ed02856",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELgNG5/UuEYnCbkFWN+CKmm7nMkw4ws8mCKXwrd6ehYbzepJTj1TkmC52I7JGUX1uQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "123",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("2b345d5d-4714-401f-b124-32836d210679"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68898c89-1b09-46b9-8851-f8493ef10937",
                            Email = "supervisor@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERVISOR@GMAIL.COM",
                            NormalizedUserName = "SUPERVISOR",
                            PasswordHash = "AQAAAAIAAYagAAAAED8d8VIlqpBtGv1LyYCsPEW7Lyn+BkhR2Rk+O0feNm04YRmc0xqDxiHVXLWqkKPHBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "123",
                            TwoFactorEnabled = false,
                            UserName = "supervisor"
                        },
                        new
                        {
                            Id = new Guid("3b345d5d-4714-401f-b124-32836d210679"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0121cf17-9ef6-4e14-9879-6d36cdfae834",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAECnk59tvsC6Yh/aRD8IscozMZnYLu73/1nRv1tf1xvkpj3wUUB2bv41LBXN+A1hGJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "123",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Identity.Entities.ApplicationUserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedOn");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UsersPermissions", "Identity", t =>
                        {
                            t.Property("UpdatedOn")
                                .HasColumnName("UpdatedOn1");
                        });

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1b345d5d-4714-401f-b124-32836d210679"),
                            PermissionId = 1,
                            CreatedOn = new DateTime(2024, 4, 24, 22, 11, 16, 873, DateTimeKind.Local).AddTicks(173),
                            UpdatedOn = new DateTime(2024, 4, 24, 22, 11, 16, 873, DateTimeKind.Local).AddTicks(246)
                        },
                        new
                        {
                            UserId = new Guid("1b345d5d-4714-401f-b124-32836d210679"),
                            PermissionId = 2,
                            CreatedOn = new DateTime(2024, 4, 24, 22, 11, 16, 873, DateTimeKind.Local).AddTicks(263),
                            UpdatedOn = new DateTime(2024, 4, 24, 22, 11, 16, 873, DateTimeKind.Local).AddTicks(267)
                        },
                        new
                        {
                            UserId = new Guid("1b345d5d-4714-401f-b124-32836d210679"),
                            PermissionId = 3,
                            CreatedOn = new DateTime(2024, 4, 24, 22, 11, 16, 873, DateTimeKind.Local).AddTicks(273),
                            UpdatedOn = new DateTime(2024, 4, 24, 22, 11, 16, 873, DateTimeKind.Local).AddTicks(276)
                        },
                        new
                        {
                            UserId = new Guid("1b345d5d-4714-401f-b124-32836d210679"),
                            PermissionId = 7,
                            CreatedOn = new DateTime(2024, 4, 24, 22, 11, 16, 873, DateTimeKind.Local).AddTicks(291),
                            UpdatedOn = new DateTime(2024, 4, 24, 22, 11, 16, 873, DateTimeKind.Local).AddTicks(294)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsersClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UsersLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UsersTokens", "Identity");
                });

            modelBuilder.Entity("CleanArchitecture.Identity.Entities.ApplicationUserRole<System.Guid>", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.ToTable("UsersRoles", "Identity");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1b345d5d-4714-401f-b124-32836d210679"),
                            RoleId = new Guid("557d96c5-6ab6-40b9-b2a3-47166e861366")
                        },
                        new
                        {
                            UserId = new Guid("1b345d5d-4714-401f-b124-32836d210679"),
                            RoleId = new Guid("447d96c5-6ab6-40b9-b2a3-47166e861366")
                        },
                        new
                        {
                            UserId = new Guid("1b345d5d-4714-401f-b124-32836d210679"),
                            RoleId = new Guid("337d96c5-6ab6-40b9-b2a3-47166e861366")
                        },
                        new
                        {
                            UserId = new Guid("2b345d5d-4714-401f-b124-32836d210679"),
                            RoleId = new Guid("447d96c5-6ab6-40b9-b2a3-47166e861366")
                        },
                        new
                        {
                            UserId = new Guid("2b345d5d-4714-401f-b124-32836d210679"),
                            RoleId = new Guid("337d96c5-6ab6-40b9-b2a3-47166e861366")
                        },
                        new
                        {
                            UserId = new Guid("3b345d5d-4714-401f-b124-32836d210679"),
                            RoleId = new Guid("337d96c5-6ab6-40b9-b2a3-47166e861366")
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Identity.Entities.ApplicationUserPermission", b =>
                {
                    b.HasOne("CleanArchitecture.Identity.Entities.ApplicationPermission<int>", "Permission")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Identity.Entities.ApplicationUser<System.Guid>", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitecture.Identity.Entities.ApplicationRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitecture.Identity.Entities.ApplicationUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitecture.Identity.Entities.ApplicationUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitecture.Identity.Entities.ApplicationRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Identity.Entities.ApplicationUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitecture.Identity.Entities.ApplicationUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Identity.Entities.ApplicationUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitecture.Identity.Entities.ApplicationUserRole<System.Guid>", "UserId", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Identity.Entities.ApplicationPermission<int>", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CleanArchitecture.Identity.Entities.ApplicationUser<System.Guid>", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
