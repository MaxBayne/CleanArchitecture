@using CleanArchitecture.Blazor.ViewModels.Game

@page "/game/edit/{Id:int}"
@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject IGamesClient GamesClient
@inject IGenresClient GenresClient
@inject ILogger<EditGame> Logger


@code
{
    [Parameter]
    public int? Id { get; set; }

    [Inject]
    [SupplyParameterFromForm]
    private EditGameViewModel? ViewModel { get; set; }


    #region Overrides

    //Called When Component receive data Over Parameters
    protected override void OnParametersSet()
    {
        ViewModel.Id = Id.Value;


         if (ViewModel!.Name != null)
         {
             //When Form Submitted inside ViewModel
             
             return;
        }

        if (Id is not null)
        {
            

            //Search For Current Game To can edit it
            var currentGame = GamesClient.FindById(Id.Value);

            if (currentGame != null)
            {
                ViewModel.Id = currentGame.Id;
                ViewModel.Name = currentGame.Name;
                ViewModel.GenreId = currentGame.Genre.Id;
                ViewModel.Price = currentGame.Price;
                ViewModel.Year = currentGame.Year;
            }
            else
            {
                Id = null;
            }
        }
    }

    //Called When Component is ready to start and its parameters was set
    protected override void OnInitialized()
    {
        ViewModel!.GenresList = GenresClient.GetGameGenres();
    }

    #endregion

    #region Form Events

    private void HandleEditForm()
    {
        Logger.LogInformation($"(Submitted)=> Id:{ViewModel!.Id},Name:{ViewModel!.Name},GenreId:{ViewModel!.GenreId},Price:{ViewModel!.Price},Year:{ViewModel!.Year}");

        GamesClient.UpdateGame(ViewModel!.Id, ViewModel!.Name!, ViewModel!.GenreId, ViewModel!.Price, ViewModel!.Year);

        Navigation.NavigateTo("/game/list");
    }

    #endregion
}



<PageTitle>Edit Game</PageTitle>

<h3>Edit Game</h3>


@if (Id is not null)
{
    <EditForm class="row g-3" Model="@ViewModel" FormName="FormEditGameCatalog" OnValidSubmit="@HandleEditForm">

        <DataAnnotationsValidator />

        <ValidationSummary />

        <div class="col-12">
            <label for="txtName" class="form-label">Name</label>
            <InputText id="txtName" @bind-Value="@ViewModel.Name" class="form-control" placeholder="Name" />
            <ValidationMessage For="@(() => ViewModel!.Name)" />
        </div>

        <div class="col-md-4">
            <label for="cboGenre" class="form-label">Genre</label>
            <InputSelect id="cboGenre" class="form-select" @bind-Value="@ViewModel!.GenreId">
                <option value="-1" selected>Select...</option>

                @foreach (var genre in ViewModel.GenresList)
                {
                    <option value="@genre.Id">@genre.Name</option>
                }

            </InputSelect>
            <ValidationMessage For="@(() => ViewModel!.GenreId)" />
        </div>

        <div class="col-md-4">
            <label for="txtPrice" class="form-label">Price</label>
            <InputNumber id="txtPrice" class="form-control" @bind-Value="@ViewModel!.Price" />
            <ValidationMessage For="@(() => ViewModel!.Price)" />
        </div>

        <div class="col-md-4">
            <label for="txtYear" class="form-label">Year</label>
            <InputNumber id="txtYear" class="form-control" @bind-Value="@ViewModel!.Year" />
            <ValidationMessage For="@(() => ViewModel!.Year)" />
        </div>

        <div class="col-12">
            <button type="submit" class="btn btn-primary" role="button">Save Changes</button>
            <a class="btn btn-secondary" role="button" href="/game/list">Cancel</a>
        </div>

    </EditForm>
}
else
{
    <div>Sorry Id Not Available</div>
}


