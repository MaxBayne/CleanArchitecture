@using CleanArchitecture.Blazor.ViewModels.Implements.Game

@page "/game/edit"

@inject NavigationManager Navigation
@inject IGamesClient GamesClient
@inject IGenresClient GenresClient
@* @inject IEditGameViewModel ViewModel *@
@* @inject EditGameViewModel ViewModel *@
@inject ILogger<EditGame> Logger


@code
{
    private EditGameViewModel ViewModel = new EditGameViewModel();

    #region Parameters

    // [SupplyParameterFromForm()]
    // private int GameId { get; set; }

    // [SupplyParameterFromForm()]
    // private string GameName { get; set; } = null!;

    // [SupplyParameterFromForm()]
    // private int GameGenreId { get; set; }

    // [SupplyParameterFromForm()]
    // private decimal GamePrice { get; set; }

    // [SupplyParameterFromForm()]
    // private int GameYear { get; set; }

    #endregion

    #region Overrides

    //Called When Component is ready to start and its parameters was set
    protected override void OnInitialized()
    {
        /*
        ViewModel.Genres = GenresClient.GetGameGenres();


        //Search For Current Game To can edit it
        //GameId = 1;
        var currentGame = GamesClient.FindById(1);

        if (currentGame != null)
        {
            ViewModel.Id = currentGame.Id;
            ViewModel.Name = currentGame.Name;
            ViewModel.GenreId = currentGame.Genre!.Id;
            ViewModel.Price = currentGame.Price;
            ViewModel.Year = currentGame.Year;

            ViewModel.IsExist = true;
        }
        else
        {
            ViewModel.IsExist = false;
        }
        */
        Logger.LogInformation($"(Initialized)=> Id:{ViewModel.Id},Name:{ViewModel.Name},GenreId:{ViewModel.GenreId},Price:{ViewModel.Price},Year:{ViewModel.Year}");
    }

    #endregion

    #region Form Events

    private void HandleEditForm()
    {
        Logger.LogInformation($"(Submitted)=> Id:{ViewModel.Id},Name:{ViewModel.Name},GenreId:{ViewModel.GenreId},Price:{ViewModel.Price},Year:{ViewModel.Year}");

        GamesClient.UpdateGame(ViewModel.Id, ViewModel.Name, ViewModel.GenreId, ViewModel.Price, ViewModel.Year);

        //Navigation.NavigateTo("/game/list");
    }

    #endregion

}



<PageTitle>Edit Game Catalog</PageTitle>

<h3>Edit GameCatalog</h3>




<EditForm class="row g-3" Model="@ViewModel" FormName="FormEditGameCatalog" OnValidSubmit="@HandleEditForm">

    <div class="col-12">
        <label for="txtName" class="form-label">Name</label>
        <InputText id="txtName" @bind-Value="@ViewModel.Name" class="form-control" placeholder="Name"  />
        <ValidationMessage For="@(() => ViewModel.Name)" />
    </div>

    <div class="col-md-4">
        <label for="cboGenre" class="form-label">Genre</label>
        @* <InputSelect id="cboGenre" class="form-select" @bind-Value="@ViewModel.GenreId">
            <option value="-1" selected>Select...</option>

            @foreach (var genre in ViewModel.Genres!)
            {
                <option value="@genre.Id">@genre.Name</option>
            }

        </InputSelect> *@
        <ValidationMessage For="@(() => ViewModel.GenreId)" />
    </div>

    <div class="col-md-4">
        <label for="txtPrice" class="form-label">Price</label>
        <InputNumber id="txtPrice" class="form-control" @bind-Value="@ViewModel.Price" />
        <ValidationMessage For="@(() => ViewModel.Price)" />
    </div>

    <div class="col-md-4">
        <label for="txtYear" class="form-label">Year</label>
        <InputNumber id="txtYear" class="form-control" @bind-Value="@ViewModel.Year" />
        <ValidationMessage For="@(() => ViewModel.Year)" />
    </div>

    <div class="col-12">
        <button type="submit" class="btn btn-primary" role="button">Save Changes</button>
        <a class="btn btn-secondary" role="button" href="/game/list">Cancel</a>
    </div>

</EditForm>



  